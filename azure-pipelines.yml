# sample azure pipelie for node.js


trigger:
- master

resources:
- repo: self

variables:
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: |
          $(tag)

- stage: EsLint
  displayName: Npm run esLint
  jobs:
  - job: EsLint
    displayName: EsLint
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: Npm@1
        inputs:
          command: custom
          workingDir: string # Working folder that contains package.json.
          customCommand: npm run lint

- stage: Test
  displayName: Npm run test
  jobs:
  - job: Test
    displayName: Test
    pool:
      vmImage: ubuntu-latest
    steps:
      - task: Npm@1
        inputs:
          command: ci
          workingDir: string # Working folder that contains package.json.

- stage: Sonar_Analysis
  displayName: Sonar Analysis
  jobs:
  - job: SonarQube
    displayName:  Sonar Analysis
    pool:
      vmImage: ubuntu-latest
    steps:
      # Prepare Analysis Configuration task
      - task: SonarQubePostTest@5
        inputs:
           
          SonarQube: 'YourSonarqubeServerEndpoint'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'YourProjectKey'

      # Run Code Analysis task
      - task: SonarQubeAnalyze@5

      # Publish Quality Gate Result task
      - task: SonarQubePublish@5
        inputs:
          pollingTimeoutSec: '300'
      
- stage: Docker push
  displayName: Docker push
  jobs:  
  - job: Push
    displayName: Docker push
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Push an image to container registry
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Deploy
  displayName: Deploy
  jobs:  
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesCluster: ""
        command: apply
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'